// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model GameResult {
  id             String   @id @default(cuid())
  gameType       String
  player1Name    String
  player1Army    String
  player1Score   Int
  player1        User?    @relation("player1", fields: [player1Id], references: [id])
  player1Id      String?
  player2Name    String
  player2Army    String
  player2Score   Int
  player2        User?    @relation("player2", fields: [player2Id], references: [id])
  player2Id      String?
  numberOfRounds Int
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String?      @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  gamesAsPlayer1 GameResult[] @relation("player1")
  gamesAsPlayer2 GameResult[] @relation("player2")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
